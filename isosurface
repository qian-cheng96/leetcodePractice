
//------------------------------------------------------------------------------
#include "chai3d.h"
//------------------------------------------------------------------------------
#include <GLFW/glfw3.h>
//------------------------------------------------------------------------------
using namespace chai3d;
using namespace std;
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// GENERAL SETTINGS
//------------------------------------------------------------------------------

// stereo Mode
/*
    C_STEREO_DISABLED:            Stereo is disabled 
    C_STEREO_ACTIVE:              Active stereo for OpenGL NVDIA QUADRO cards
    C_STEREO_PASSIVE_LEFT_RIGHT:  Passive stereo where L/R images are rendered next to each other
    C_STEREO_PASSIVE_TOP_BOTTOM:  Passive stereo where L/R images are rendered above each other
*/
cStereoMode stereoMode = C_STEREO_DISABLED;

// fullscreen mode
bool fullscreen = false;

// mirrored display
bool mirroredDisplay = false;


//------------------------------------------------------------------------------
// STATES
//------------------------------------------------------------------------------
enum MouseStates
{
    MOUSE_IDLE,
    MOUSE_MOVE_CAMERA
};

enum HapticStates
{
    HAPTIC_IDLE,
    HAPTIC_SELECTION
};


//------------------------------------------------------------------------------
// DECLARED VARIABLES
//------------------------------------------------------------------------------

// a world that contains all objects of the virtual environment
cWorld* world;

// a camera to render the world in the window display
cCamera* camera;

// a light source to illuminate the objects in the world
cDirectionalLight *light;

// a haptic device handler
cHapticDeviceHandler* handler;

// a pointer to the current haptic device
cGenericHapticDevicePtr hapticDevice;

// a virtual tool representing the haptic device in the scene
cToolCursor* tool;

cVector3d hapticDevicePosition;

//手术器械
cMultiMesh* drillTool;

// a sphere to show the projected point on the surface
cShapeSphere* cursor;

cMultiImagePtr image2;

// a virtual hand object from a CT scan
cVoxelObject* object;

cVoxelObject* object2;

cMutex mutexObject;
cMutex mutexVoxel;
cCollisionAABBBox volumeUpdate;
bool flagMarkVolumeForUpdate = false;
// angular velocity of object
cVector3d angVel(0.0, 0.0, 0.1);
cTexture3dPtr texture;

cTexture3dPtr texture2;
// a colored background
cBackground* background;

// a font for rendering text
cFontPtr font;

// a label to display the rate [Hz] at which the simulation is running
cLabel* labelRates;

// a label to explain what is happening
cLabel* labelMessage;

// a flag that indicates if the haptic simulation is currently running
bool simulationRunning = false;

// a flag that indicates if the haptic simulation has terminated
bool simulationFinished = true;

// a frequency counter to measure the simulation graphic rate
cFrequencyCounter freqCounterGraphics;

// a frequency counter to measure the simulation haptic rate
cFrequencyCounter freqCounterHaptics;

// mouse state
MouseStates mouseState = MOUSE_IDLE;

// last mouse position
double mouseX, mouseY;

// haptic thread
cThread* hapticsThread;

cImagePtr boneLUT;


// a handle to window display context
GLFWwindow* window = NULL;

// current width of window
int width  = 0;

// current height of window
int height = 0;

// swap interval for the display context (vertical synchronization)
int swapInterval = 1;


//------------------------------------------------------------------------------
// DECLARED MACROS
//------------------------------------------------------------------------------
// convert to resource path
#define RESOURCE_PATH(p)    (char*)((resourceRoot+string(p)).c_str())


//------------------------------------------------------------------------------
// DECLARED FUNCTIONS
//------------------------------------------------------------------------------

// callback when the window display is resized
void windowSizeCallback(GLFWwindow* a_window, int a_width, int a_height);

// callback when an error GLFW occurs
void errorCallback(int error, const char* a_description);

// callback when a key is pressed
void keyCallback(GLFWwindow* a_window, int a_key, int a_scancode, int a_action, int a_mods);

// callback to handle mouse click
void mouseButtonCallback(GLFWwindow* a_window, int a_button, int a_action, int a_mods);

// callback to handle mouse motion
void mouseMotionCallback(GLFWwindow* a_window, double a_posX, double a_posY);

// callback to handle mouse scroll
void mouseScrollCallback(GLFWwindow* a_window, double a_offsetX, double a_offsetY);

// this function renders the scene
void updateGraphics(void);

// this function contains the main haptics simulation loop
void updateHaptics(void);
void updateHapticsV2(void);
void updateHapticsV3(void);

void buildLesionArea();

void close(void);


int main(int argc, char* argv[])
{
    //--------------------------------------------------------------------------
    // INITIALIZATION
    //--------------------------------------------------------------------------

    cout << endl;
    cout << "-----------------------------------" << endl;
    cout << "CHAI3D" << endl;
    cout << "Demo: 29-isosurface" << endl;
    cout << "Copyright 2003-2016" << endl;
    cout << "-----------------------------------" << endl << endl << endl;
    cout << "Keyboard Options:" << endl << endl;
    cout << "[1] - Select first isosurface" << endl;
    cout << "[2] - Select second isosurface" << endl;
    cout << "[3] - Decrease quality of graphic rendering" << endl;
    cout << "[4] - Increase quality of graphic rendering" << endl;
    cout << "[f] - Enable/Disable full screen mode" << endl;
    cout << "[m] - Enable/Disable vertical mirroring" << endl;
    cout << "[q] - Exit application" << endl;
    cout << endl << endl;

    // parse first arg to try and locate resources
    string resourceRoot = string(argv[0]).substr(0,string(argv[0]).find_last_of("/\\")+1);


    //--------------------------------------------------------------------------
    // OPEN GL - WINDOW DISPLAY
    //--------------------------------------------------------------------------

    // initialize GLFW library
    if (!glfwInit())
    {
        cout << "failed initialization" << endl;
        cSleepMs(1000);
        return 1;
    }

    // set error callback
    glfwSetErrorCallback(errorCallback);

    // compute desired size of window
    const GLFWvidmode* mode = glfwGetVideoMode(glfwGetPrimaryMonitor());
    int w = 0.8 * mode->height;
    int h = 0.5 * mode->height;
    int x = 0.5 * (mode->width - w);
    int y = 0.5 * (mode->height - h);

    // set OpenGL version
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1);

    // set active stereo mode
    if (stereoMode == C_STEREO_ACTIVE)
    {
        glfwWindowHint(GLFW_STEREO, GL_TRUE);
    }
    else
    {
        glfwWindowHint(GLFW_STEREO, GL_FALSE);
    }

    // create display context
    window = glfwCreateWindow(w, h, "simulation system", NULL, NULL);
    if (!window)
    {
        cout << "failed to create window" << endl;
        cSleepMs(1000);
        glfwTerminate();
        return 1;
    }

    // get width and height of window
    glfwGetWindowSize(window, &width, &height);

    // set position of window
    glfwSetWindowPos(window, x, y);

    // set key callback
    glfwSetKeyCallback(window, keyCallback);

    // set resize callback
    glfwSetWindowSizeCallback(window, windowSizeCallback);

    // set mouse position callback
    glfwSetCursorPosCallback(window, mouseMotionCallback);

    // set mouse button callback
    glfwSetMouseButtonCallback(window, mouseButtonCallback);

    // set mouse scroll callback
    glfwSetScrollCallback(window, mouseScrollCallback);

    // set current display context
    glfwMakeContextCurrent(window);

    // sets the swap interval for the current display context
    glfwSwapInterval(swapInterval);

#ifdef GLEW_VERSION
    // initialize GLEW library
    if (glewInit() != GLEW_OK)
    {
        cout << "failed to initialize GLEW library" << endl;
        glfwTerminate();
        return 1;
    }
#endif


    //--------------------------------------------------------------------------
    // WORLD - CAMERA - LIGHTING
    //--------------------------------------------------------------------------

    // create a new world.
    world = new cWorld();

    // set the background color of the environment
    world->m_backgroundColor.setBlack();

    // create a camera and insert it into the virtual world
    camera = new cCamera(world);
    world->addChild(camera);

    // define a basis in spherical coordinates for the camera
    camera->setSphericalReferences(cVector3d(0,0,0),    // origin
                                   cVector3d(0,0,1),    // zenith direction
                                   cVector3d(1,0,0));   // azimuth direction

    camera->setSphericalDeg(1.2,    // spherical coordinate radius
                            60,     // spherical coordinate polar angle
                           -10);    // spherical coordinate azimuth angle

    // set the near and far clipping planes of the camera
    // anything in front or behind these clipping planes will not be rendered
    camera->setClippingPlanes(0.1, 10.0);

    // set stereo mode
    camera->setStereoMode(stereoMode);

    // set stereo eye separation and focal length (applies only if stereo is enabled)
    camera->setStereoEyeSeparation(0.02);
    camera->setStereoFocalLength(2.0);

    // set vertical mirrored display mode
    camera->setMirrorVertical(mirroredDisplay);

    // create a light source
    light = new cDirectionalLight(world);

    // attach light to camera
    camera->addChild(light);

    // enable light source
    light->setEnabled(true);

    // define the direction of the light beam
    light->setDir(-3.0,-0.5, 0.0);


    //--------------------------------------------------------------------------
    // HAPTIC DEVICES / TOOLS
    //--------------------------------------------------------------------------

    // create a haptic device handler
    handler = new cHapticDeviceHandler();

    // get access to the first available haptic device found
    handler->getDevice(hapticDevice, 0);

    // retrieve information about the current haptic device
    cHapticDeviceInfo hapticDeviceInfo = hapticDevice->getSpecifications();
	

    // create a tool (cursor) and insert into the world
    tool = new cToolCursor(world);
    world->addChild(tool);
	
	
    // connect the haptic device to the virtual tool
    tool->setHapticDevice(hapticDevice);

    // if the haptic device has a gripper, enable it as a user switch
    hapticDevice->setEnableGripperUserSwitch(true);

    // define a radius for the virtual tool (sphere)
    tool->setRadius(0.03);

	tool->setShowContactPoints(false, false);
    // map the physical workspace of the haptic device to a larger virtual workspace.
    tool->setWorkspaceRadius(0.8);
	

    // oriente tool with camera
    tool->setLocalRot(camera->getLocalRot());

    // haptic forces are enabled only if small forces are first sent to the device;
    // this mode avoids the force spike that occurs when the application starts when 
    // the tool is located inside an object for instance. 
    tool->setWaitForSmallForce(true);

    // start the haptic tool
    tool->start();

    // read the scale factor between the physical workspace of the haptic
    // device and the virtual workspace defined for the tool
    double workspaceScaleFactor = tool->getWorkspaceScaleFactor();
    
    // stiffness properties
    double maxStiffness	= hapticDeviceInfo.m_maxLinearStiffness / workspaceScaleFactor;


    //--------------------------------------------------------------------------
    // CREATE OBJECT
    //--------------------------------------------------------------------------

    // create two volumetric models
    object = new cVoxelObject();
	
	object2 = new cVoxelObject();
    // add object to world
    world->addChild(object);
	//world->addChild(object2);
	
    // position object
    object->setLocalPos(-0.9, 0, 0.0);

    // rotate object
    object->rotateExtrinsicEulerAnglesDeg(120, 45, -45, C_EULER_ORDER_XYZ);
    
    // set the dimensions by assigning the position of the min and max corners
    object->m_minCorner.set(-0.5,-0.5,-0.65);
    object->m_maxCorner.set( 0.5, 0.5, 0.65);
    
    // set the texture coordinate at each corner.
    object->m_minTextureCoord.set(0.0, 0.0, 0.0);
    object->m_maxTextureCoord.set(1.0, 1.0, 1.0);

    // set haptic properties
    object->m_material->setStiffness(0.2 * maxStiffness);
    object->m_material->setStaticFriction(0.1);
    object->m_material->setDynamicFriction(0.1);

    // enable materials
    object->setUseMaterial(true);

    // set material color
	//object->setRenderingModeIsosurfaceMaterial();
    //object->m_material->setYellowPeachPuff();
	
	object->setRenderingModeDVRColorMap();
	object->createAABBCollisionDetector(0.02);
	//object->m_material->setWhiteIvory();

	//object2->setLocalPos(-0.7, 0.0, 0.0);
	/*object2->m_minCorner.set(-0.5, -0.5, -0.5);
	object2->m_maxCorner.set(0.5, 0.5, 0.5);
	object2->m_minTextureCoord.set(0.0, 0.0, 0.0);
	object2->m_maxTextureCoord.set(1.0, 1.0, 1.0);*/
	
	//image2 = cMultiImage::create();
	//image2->allocate(64, 64, 64, GL_RGBA);
	//texture2 = cTexture3d::create();
	//object2->setTexture(texture2);
	//texture2->setImage(image2);
	//object2->setQuality(0.5);
	
	//object->addChild(object2);

	//buildLesionArea();
	//object2->setRenderingModeIsosurfaceColors();
	//object2->createAABBCollisionDetector(0.9);

    //--------------------------------------------------------------------------
    // LOAD VOXEL DATA
    //--------------------------------------------------------------------------

    // create multi image
    cMultiImagePtr image = cMultiImage::create();
	int filesloaded = image->loadFromFiles(RESOURCE_PATH("../resources/volumes/clip/skull0"), "jpg", 91);
    //int filesloaded = image->loadFromFiles(RESOURCE_PATH("../resources/volumes/hand/hand0"), "png", 640);
    if (filesloaded == 0) {
        #if defined(_MSVC)
        filesloaded = image->loadFromFiles("../../../bin/resources/volumes/hand/hand0", "png", 640);
        #endif
    }
    if (filesloaded == 0) {
        cout << "Error - Failed to load volume data handXXXX.png." << endl;
        close();
        return -1;
    }

    // create texture
    texture = cTexture3d::create();

    // assign volumetric image to texture
    texture->setImage(image);

    // assign texture to voxel object
    object->setTexture(texture);

    // sset isosurface level on object
    object->setIsosurfaceValue(0.2);
	//object->addChild(object2);
	//object->computeBoundaryBox();
    // show/hide boundary box
    object->setShowBoundaryBox(true);

    // enable isosurface rendering mode
	//object->setRenderingModeIsosurfaceMaterial();


	boneLUT = cImage::create();
	bool fileLoaded = boneLUT->loadFromFile(RESOURCE_PATH("../resources/volumes/heart/colormap_bone.png"));
	if (!fileLoaded) {
#if defined(_MSVC)
		fileLoaded = boneLUT->loadFromFile("../../../bin/resources/volumes/heart/colormap_bone.png");
#endif
	}
	if (!fileLoaded)
	{
		cout << "Error - Failed to load colormap." << endl;
		close();
		return -1;
	}

	object->m_colorMap->setImage(boneLUT);


	drillTool = new cMultiMesh();
	tool->m_image->addChild(drillTool);
	bool fileload;
	fileload = drillTool->loadFromFile(RESOURCE_PATH("../resources/models/temporalTool/toolv2.obj"));

	if (!fileload)
	{
#if defined(_MSVC)
		fileload = drillTool->loadFromFile("../../../bin/resources/models/temporalTool/toolv2.obj");
#endif
	}
	if (!fileload)
	{
		cout << "Error - 3D Model failed to load correctly." << endl;
		close();
		return (-1);
	}
	 
	// disable culling so that faces are rendered on both sides
	drillTool->setUseCulling(false);

	// scale model
	drillTool->scale(0.009);
	drillTool->setUseDisplayList(true);

	// position object in scene
	drillTool->rotateExtrinsicEulerAnglesDeg(0, 0, 0, C_EULER_ORDER_XYZ);

    //--------------------------------------------------------------------------
    // WIDGETS
    //--------------------------------------------------------------------------

    // create a font
    font = NEW_CFONTCALIBRI20();
    
    // create a label to display the haptic and graphic rate of the simulation
    labelRates = new cLabel(font);
    camera->m_frontLayer->addChild(labelRates);

    // set font color
    labelRates->m_fontColor.setBlack();

    // create a small message
    labelMessage = new cLabel(font);
    labelMessage->m_fontColor.setBlack();
    labelMessage->setText("press keys [1,2] to toggle between isometric values");
    camera->m_frontLayer->addChild(labelMessage);

    // create a background
    background = new cBackground();
    camera->m_backLayer->addChild(background);

    // set background properties
    background->setCornerColors(cColorf(1.0f, 1.0f, 1.0f),
                                cColorf(1.0f, 1.0f, 1.0f),
                                cColorf(0.7f, 0.7f, 0.7f),
                                cColorf(0.7f, 0.7f, 0.7f));


    //--------------------------------------------------------------------------
    // START SIMULATION
    //--------------------------------------------------------------------------

    // create a thread which starts the main haptics rendering loop
    hapticsThread = new cThread();
    hapticsThread->start(updateHapticsV2, CTHREAD_PRIORITY_HAPTICS);

    // setup callback when application exits
    atexit(close);


    //--------------------------------------------------------------------------
    // MAIN GRAPHIC LOOP
    //--------------------------------------------------------------------------

    // call window size callback at initialization
    windowSizeCallback(window, width, height);

    // main graphic loop
    while (!glfwWindowShouldClose(window))
    {
        // get width and height of window
        glfwGetWindowSize(window, &width, &height);

        // render graphics
        updateGraphics();

        // swap buffers
        glfwSwapBuffers(window);

        // process events
        glfwPollEvents();

        // signal frequency counter
        freqCounterGraphics.signal(1);
    }

    // close window
    glfwDestroyWindow(window);

    // terminate GLFW library
    glfwTerminate();

    // exit
    return 0;
}

//------------------------------------------------------------------------------

void windowSizeCallback(GLFWwindow* a_window, int a_width, int a_height)
{
    // update window size
    width  = a_width;
    height = a_height;
}

//------------------------------------------------------------------------------

void errorCallback(int a_error, const char* a_description)
{
    cout << "Error: " << a_description << endl;
}

//------------------------------------------------------------------------------

void keyCallback(GLFWwindow* a_window, int a_key, int a_scancode, int a_action, int a_mods)
{
    // filter calls that only include a key press
    if ((a_action != GLFW_PRESS) && (a_action != GLFW_REPEAT))
    {
        return;
    }

    // option - exit
    else if ((a_key == GLFW_KEY_ESCAPE) || (a_key == GLFW_KEY_Q))
    {
        glfwSetWindowShouldClose(a_window, GLFW_TRUE);
    }

    // option - render skin isosurface
    else if (a_key == GLFW_KEY_1)
    {
        object->setIsosurfaceValue(0.18);
        object->m_material->setYellowPeachPuff();
        cout << "> Isosurface set to " << cStr(object->getIsosurfaceValue(), 3) << "        \r";
    }

    // option - render bone isosurface
    else if (a_key == GLFW_KEY_2)
    {
        object->setIsosurfaceValue(0.32);
        object->m_material->setWhiteIvory();
        cout << "> Isosurface set to " << cStr(object->getIsosurfaceValue(), 3) << "        \r";
    }

    // option - decrease quality of graphic rendering
    else if (a_key == GLFW_KEY_3)
    {
        double value = object->getQuality();
        object->setQuality(value - 0.1);
        cout << "> Quality set to " << cStr(object->getQuality(), 1) << "        \r";
    }

    // option - increase quality of graphic rendering
    else if (a_key == GLFW_KEY_D)
    {
        double value = object->getQuality();
        object->setQuality(value + 0.1);
        cout << "> Quality set to " << cStr(object->getQuality(), 1) << "        \r";
    }
	else if (a_key == GLFW_KEY_4)
	{
		double value = cClamp((object->m_maxCorner.x() - 0.005), 0.01, 0.5);
		object->m_maxCorner.x(value);
		object->m_minCorner.x(-value);
		object->m_maxTextureCoord.x(0.5 + value);
		object->m_minTextureCoord.x(0.5 - value);
		cout << "> Reduce size along X axis.                            \r";
	}

	// option - increase size along X axis
	else if (a_key == GLFW_KEY_5)
	{
		double value = cClamp((object->m_maxCorner.x() + 0.005), 0.01, 0.5);
		object->m_maxCorner.x(value);
		object->m_minCorner.x(-value);
		object->m_maxTextureCoord.x(0.5 + value);
		object->m_minTextureCoord.x(0.5 - value);
		cout << "> Increase size along X axis.                            \r";
	}

	// option - reduce size along Y axis
	else if (a_key == GLFW_KEY_6)
	{
		double value = cClamp((object->m_maxCorner.y() - 0.005), 0.01, 0.5);
		object->m_maxCorner.y(value);
		object->m_minCorner.y(-value);
		object->m_maxTextureCoord.y(0.5 + value);
		object->m_minTextureCoord.y(0.5 - value);
		cout << "> Reduce size along Y axis.                            \r";
	}

	// option - increase size along Y axis
	else if (a_key == GLFW_KEY_7)
	{
		double value = cClamp((object->m_maxCorner.y() + 0.005), 0.01, 0.5);
		object->m_maxCorner.y(value);
		object->m_minCorner.y(-value);
		object->m_maxTextureCoord.y(0.5 + value);
		object->m_minTextureCoord.y(0.5 - value);
		cout << "> Increase size along Y axis.                            \r";
	}
    // option - toggle fullscreen
    else if (a_key == GLFW_KEY_F)
    {
        // toggle state variable
        fullscreen = !fullscreen;

        // get handle to monitor
        GLFWmonitor* monitor = glfwGetPrimaryMonitor();

        // get information about monitor
        const GLFWvidmode* mode = glfwGetVideoMode(monitor);

        // set fullscreen or window mode
        if (fullscreen)
        {
            glfwSetWindowMonitor(window, monitor, 0, 0, mode->width, mode->height, mode->refreshRate);
            glfwSwapInterval(swapInterval);
        }
        else
        {
            int w = 0.8 * mode->height;
            int h = 0.5 * mode->height;
            int x = 0.5 * (mode->width - w);
            int y = 0.5 * (mode->height - h);
            glfwSetWindowMonitor(window, NULL, x, y, w, h, mode->refreshRate);
            glfwSwapInterval(swapInterval);
        }
    }

    // option - toggle vertical mirroring
    else if (a_key == GLFW_KEY_M)
    {
        mirroredDisplay = !mirroredDisplay;
        camera->setMirrorVertical(mirroredDisplay);
    }
}

//------------------------------------------------------------------------------

void mouseButtonCallback(GLFWwindow* a_window, int a_button, int a_action, int a_mods)
{
    if (a_button == GLFW_MOUSE_BUTTON_LEFT && a_action == GLFW_PRESS)
    {
        // store mouse position
        glfwGetCursorPos(window, &mouseX, &mouseY);

        // update mouse state
        mouseState = MOUSE_MOVE_CAMERA;
		cCollisionRecorder recorder;
		cCollisionSettings settings;
		bool hit = camera->selectWorld(mouseX, (height - mouseY), width, height, recorder, settings);
		if (hit)
		{
			// check if hit involves voxel object
			if (recorder.m_nearestCollision.m_object == object)
			{
				// get selected voxel
			   
				int voxelX = recorder.m_nearestCollision.m_voxelIndexX;
				int voxelY = recorder.m_nearestCollision.m_voxelIndexY;
				int voxelZ = recorder.m_nearestCollision.m_voxelIndexZ;
				
				//cColorb color;
				//color.setf(1.0, 0.5, 0.5, 1.0);
				//image2->setVoxelColor(voxelX, voxelY, voxelZ, color);

				// set color to black
				cColorb color(0,255, 0, 0);

				// set color to voxel
				object->m_texture->m_image->setVoxelColor(voxelX, voxelY, voxelZ, color);

				// update voxel data
				object->m_texture->markForUpdate();
				//texture2->markForUpdate();
			}
		}
    }

    else
    {
        // update mouse state
        mouseState = MOUSE_IDLE;
    }
}

//------------------------------------------------------------------------------

void mouseMotionCallback(GLFWwindow* a_window, double a_posX, double a_posY)
{
    if (mouseState == MOUSE_MOVE_CAMERA)
    {
        // compute mouse motion
        int dx = a_posX - mouseX;
        int dy = a_posY - mouseY;
        mouseX = a_posX;
        mouseY = a_posY;

        // compute new camera angles
        double azimuthDeg = camera->getSphericalAzimuthDeg() - 0.5 * dx;
        double polarDeg = camera->getSphericalPolarDeg() - 0.5 * dy;

        // assign new angles
        camera->setSphericalAzimuthDeg(azimuthDeg);
        camera->setSphericalPolarDeg(polarDeg);

        // oriente tool with camera
        tool->setLocalRot(camera->getLocalRot());
    }
}

//------------------------------------------------------------------------------

void mouseScrollCallback(GLFWwindow* a_window, double a_offsetX, double a_offsetY)
{
    double r = camera->getSphericalRadius();
    r = cClamp(r + 0.1 * a_offsetY, 0.5, 3.0);
    camera->setSphericalRadius(r);
}

//------------------------------------------------------------------------------

void close(void)
{
    // stop the simulation
    simulationRunning = false;

    // wait for graphics and haptics loops to terminate
    while (!simulationFinished) { cSleepMs(100); }

    // close haptic device
    tool->stop();

    // delete resources
    delete hapticsThread;
    delete world;
    delete handler;
}

//------------------------------------------------------------------------------

void updateGraphics(void)
{
    /////////////////////////////////////////////////////////////////////
    // UPDATE WIDGETS
    /////////////////////////////////////////////////////////////////////

    // update haptic and graphic rate data
    labelRates->setText(cStr(freqCounterGraphics.getFrequency(), 0) + " Hz / " +
                        cStr(freqCounterHaptics.getFrequency(), 0) + " Hz");

    // update position of label
    labelRates->setLocalPos((int)(0.5 * (width - labelRates->getWidth())), 15);

    // update position of message label
    labelMessage->setLocalPos((int)(0.5 * (width - labelMessage->getWidth())), 40);


    /////////////////////////////////////////////////////////////////////
    // RENDER SCENE
    /////////////////////////////////////////////////////////////////////
	if (flagMarkVolumeForUpdate)
	{
		mutexVoxel.acquire();
		cVector3d min = volumeUpdate.m_min;
		cVector3d max = volumeUpdate.m_max;
		volumeUpdate.setEmpty();
		mutexVoxel.release();
		texture->markForPartialUpdate(min, max);
		flagMarkVolumeForUpdate = false;
	}
    // update shadow maps (if any)
    world->updateShadowMaps(false, mirroredDisplay);

    // render world
    camera->renderView(width, height);

    // wait until all GL commands are completed
    glFinish();

    // check for any OpenGL errors
    GLenum err = glGetError();
    if (err != GL_NO_ERROR) cout << "Error: " << gluErrorString(err) << endl;
}

//------------------------------------------------------------------------------

void updateHaptics(void)
{
    HapticStates state = HAPTIC_IDLE;
    cGenericObject* selectedObject = NULL;
    cTransform tool_T_object;

    // simulation in now running
    simulationRunning  = true;
    simulationFinished = false;

    // haptic force activation
    bool flagStart = true;
    int counter = 0;

    // main haptic simulation loop
    while(simulationRunning)
    {
        /////////////////////////////////////////////////////////////////////////
        // HAPTIC RENDERING
        /////////////////////////////////////////////////////////////////////////

        // signal frequency counter
        freqCounterHaptics.signal(1);

        // compute global reference frames for each object
        world->computeGlobalPositions(true);
		
        // update position and orientation of tool
        tool->updateFromDevice();

        // compute interaction forces
        tool->computeInteractionForces();

        // check if device remains stuck inside voxel object
        cVector3d force = tool->getDeviceGlobalForce();
        if (flagStart)
        {
            if (force.length() != 0.0)
            {
                tool->initialize();
                counter = 0;
            }
            else
            {
                counter++;
                if (counter > 10)
                    flagStart = false;
            }
        }
        else
        {
            if (force.length() > 10.0)
            {
                flagStart = true;
            }
        }

 
        /////////////////////////////////////////////////////////////////////////
        // MANIPULATION
        /////////////////////////////////////////////////////////////////////////

        // compute transformation from world to tool (haptic device)
        cTransform world_T_tool = tool->getDeviceGlobalTransform();

        // get status of user switch
        bool button = tool->getUserSwitch(0);

        //
        // STATE 1:
        // Idle mode - user presses the user switch
        //
        if ((state == HAPTIC_IDLE) && (button == true))
        {
            // check if at least one contact has occurred
            if (tool->m_hapticPoint->getNumCollisionEvents() > 0)
            {
                // get contact event
                cCollisionEvent* collisionEvent = tool->m_hapticPoint->getCollisionEvent(0);

                // get object from contact event
                selectedObject = collisionEvent->m_object;
            }
            else
            {
                selectedObject = object2;
            }

            // get transformation from object
            cTransform world_T_object = selectedObject->getGlobalTransform();

            // compute inverse transformation from contact point to object 
            cTransform tool_T_world = world_T_tool;
            tool_T_world.invert();

            // store current transformation tool
            tool_T_object = tool_T_world * world_T_object;

            // update state
            state = HAPTIC_SELECTION;
        }


        //
        // STATE 2:
        // Selection mode - operator maintains user switch enabled and moves object
        //
        else if ((state == HAPTIC_SELECTION) && (button == true))
        {
            // compute new transformation of object in global coordinates
            cTransform world_T_object = world_T_tool * tool_T_object;

            // compute new transformation of object in local coordinates
            cTransform parent_T_world = selectedObject->getParent()->getLocalTransform();
            parent_T_world.invert();
            cTransform parent_T_object = parent_T_world * world_T_object;

            // assign new local transformation to object
            selectedObject->setLocalTransform(parent_T_object);

            // set zero forces when manipulating objects
            tool->setDeviceGlobalForce(0.0, 0.0, 0.0);

            tool->initialize();
        }

        //
        // STATE 3:
        // Finalize Selection mode - operator releases user switch.
        //
        else
        {
            state = HAPTIC_IDLE;
        }


        /////////////////////////////////////////////////////////////////////////
        // FINALIZE
        /////////////////////////////////////////////////////////////////////////

        // send forces to haptic device
        tool->applyToDevice();  
    }
    
    // exit haptics thread
    simulationFinished = true;
}
void updateHapticsV2(void)
{
	cPrecisionClock clock;
	clock.reset();

	simulationRunning = true;
	simulationFinished = false;

	while (simulationRunning)
	{
		clock.stop();
		clock.reset();
		clock.start();
		freqCounterHaptics.signal(1);
		world->computeGlobalPositions(true);
		tool->updateFromDevice();
		int userSwitches = tool->getUserSwitches();
		if (mutexObject.tryAcquire())
		{
			tool->computeInteractionForces();
			if (tool->isInContact(object) && (userSwitches > 0))
			{
				cCollisionEvent* contact = tool->m_hapticPoint->getCollisionEvent(0);
				// 更新体素颜色
				cColorb color(0x00, 0xFF, 0x00, 0x00);
				object->m_texture->m_image->setVoxelColor(contact->m_voxelIndexX, contact->m_voxelIndexY, contact->m_voxelIndexZ, color);

				// mark voxel for update
				mutexVoxel.acquire();
				volumeUpdate.enclose(cVector3d(contact->m_voxelIndexX, contact->m_voxelIndexY, contact->m_voxelIndexZ));
				mutexVoxel.release();
				flagMarkVolumeForUpdate = true;
			}
			mutexObject.release();
		}
		tool->applyToDevice();
	}
	simulationFinished = true;
}
void updateHapticsV3(void)
{
	cPrecisionClock clock;
	clock.reset();

	simulationRunning = true;
	simulationFinished = false;

	while (simulationRunning)
	{
		clock.stop();
		clock.reset();
		clock.start();
		freqCounterHaptics.signal(1);
		world->computeGlobalPositions(true);
		tool->updateFromDevice();
		cVector3d position;
		
		hapticDevice->getPosition(position);
		
		double xcoor = position(0);
		double ycoor = position(1);
		double zcoor = position(2);
		int userSwitches = tool->getUserSwitches();
		hapticDevicePosition = position;
		if (mutexObject.tryAcquire())
		{
			tool->computeInteractionForces();
			if( userSwitches > 0)
			{
				
				// 更新体素颜色
				cColorb color(0x00, 0xFF, 0x00, 0xFF);
				image2->setVoxelColor(xcoor, ycoor, zcoor, color);
				//object2->m_texture->m_image->setVoxelColor(hapticDevicePosition.x, hapticDevicePosition.y, hapticDevicePosition.z, color);
				object2->m_texture->markForUpdate();
				labelMessage->setText(position.str(3));
				// mark voxel for update
				
			}
			mutexObject.release();
		}
		tool->applyToDevice();
	}
	simulationFinished = true;
}

void buildLesionArea()
{
	mutexVoxel.acquire();

	// fill all voxels
	for (int z = 0; z<20; z++)
	{
		for (int y = 0; y<20; y++)
		{
			for (int x = 0; x<20; x++)
			{
				double r = 0.0;    
				double g = 1.0;  
				double b = 0.0;   

				cColorb color;
				color.setf(r, g, b, 1.0);

				image2->setVoxelColor(x, y, z, color);
			}
		}
	}

	texture2->markForUpdate();
	mutexVoxel.release();
}

